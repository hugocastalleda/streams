(function() {
  'use strict';

  function formatGoalNumber(data) {
    let fixed = 0,
      prefix = data.currency || '';
    if (!Number.isInteger(data.amount.start) || !Number.isInteger(data.amount.current) || !Number.isInteger(data.amount.target) || data.currency) fixed = 2;
    return {
      start: prefix + data.amount.start.toFixed(fixed),
      current: prefix + data.amount.current.toFixed(fixed),
      target: prefix + data.amount.target.toFixed(fixed)
    };
  }

  const TIME = {
    millennium: 1000 * 60 * 60 * 24 * 365 * Math.pow(10, 3),
    century: 1000 * 60 * 60 * 24 * 365 * Math.pow(10, 2),
    decade: 1000 * 60 * 60 * 24 * 365 * Math.pow(10, 1),
    year: 1000 * 60 * 60 * 24 * 365,
    month: 1000 * 60 * 60 * 24 * 30,
    week: 1000 * 60 * 60 * 24 * 7,
    day: 1000 * 60 * 60 * 24,
    hour: 1000 * 60 * 60,
    minute: 1000 * 60,
    second: 1000
  };
  const ORDERED_TIME_PERIODS = ['millennium', 'century', 'decade', 'year', 'month', 'week', 'day', 'hour', 'minute', 'second'];
  const PLURAL_REPLACEMENTS = {
    centurys: 'centuries',
    millenniums: 'millennia'
  };

  function getRelativeEndDate(date) {
    date = new Date(date);
    const diff = date.getTime() - Date.now(),
      unsigned = Math.abs(diff);
    let result;

    for (let i = 0; i < ORDERED_TIME_PERIODS.length; i++) {
      const key = ORDERED_TIME_PERIODS[i],
        timePeriod = TIME[key];

      if (unsigned >= timePeriod) {
        const whole = Math.floor(unsigned / timePeriod);
        result = whole + ' ' + key + (whole === 1 ? ' ' : 's ');

        for (const toReplace in PLURAL_REPLACEMENTS) {
          result = result.replace(toReplace, PLURAL_REPLACEMENTS[toReplace]);
        }

        break;
      }
    }

    if (!result) {
      result = 'Right now';
    } else {
      if (diff > 0) result += 'to go';
      else result = `Ended ${result}ago`;
    }

    return result;
  }

  function getElement(id, tag = 'style', parent = document.head, addInBeginning = false) {
    let element = document.querySelector(`#${id}`);

    if (!element) {
      element = document.createElement(tag);
      element.id = id;

      if (!addInBeginning) {
        parent.appendChild(element);
      } else {
        parent.insertAdjacentElement('afterbegin', element);
      }
    }

    return element;
  }

  function parseColor(hex) {
    const REGEXP_HEX = /^#?(?:[a-f0-9]{3}|[a-f0-9]{6})$/i,
      REGEXP_RGB = /^rgb\s*\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)/i;
    if (!hex) return null;
    hex = hex.trim();

    if (REGEXP_HEX.test(hex)) {
      if (hex[0] === '#') hex = hex.substr(1);
      if (hex.length === 3) hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      return [parseInt(hex[0] + hex[1], 16), parseInt(hex[2] + hex[3], 16), parseInt(hex[4] + hex[5], 16)];
    } else if (REGEXP_RGB.test(hex)) {
      hex = hex.match(REGEXP_RGB);
      return [hex[1], hex[2], hex[3]];
    }

    return null;
  }

  const startLabel = document.querySelector('#goal-current');
  const goalLabel = document.querySelector('#goal-total');
  const goalStart = document.querySelector('#goal-start');
  const goalLeft = document.querySelector('#goal-left');
  const progress = document.querySelector('#goal-progress');
  const title = document.querySelector('#title');
  const timer = document.querySelector('#goal-end-date');

  function updateData(data) {
    let p = (data.amount.current - data.amount.start) / (data.amount.target - data.amount.start) * 100,
      origP = p;
    if (p < 0) p = 0;
    if (p > 100) p = 100;
    title.innerHTML = data.title;
    setEndDate(data.to_go.ends_at);
    let formatted = formatGoalNumber(data);
    startLabel.textContent = formatted.start;
    goalLabel.textContent = formatted.target;
    goalStart.style.width = p + '%';
    goalLeft.style.width = 100 - p + '%';
    progress.textContent = `${formatted.current} (${Math.floor(origP)}%)`;
    const width = goalStart.parentNode.getBoundingClientRect().width,
      offset = width * p / 100;
    if (offset <= 16) goalStart.classList.add('close-to-beginning');
    else goalStart.classList.remove('close-to-beginning');
    if (width - offset <= 16) goalStart.classList.add('close-to-end');
    else goalStart.classList.remove('close-to-end');
  }

  function setEndDate(date) {
    timer.textContent = getRelativeEndDate(date);
  }

  function eventListener(e) {
    updateData(e.detail);
  }

  document.addEventListener('goalLoad', e => {
    eventListener(e);
    const s = e.detail.settings.custom_json,
      shadowColor = parseColor(s.textShadowColor.value);
    getElement('text-shadow').textContent = `
  .goal-cont {
    text-shadow: 0 2px 4px rgba(${shadowColor}, 0.5) !important;
  }
  `;
  });
  document.addEventListener('goalEvent', eventListener);

}());
